import React, { createContext, useContext, useState, useEffect } from 'react';

interface LanguageContextType {
  language: string;
  setLanguage: (lang: string) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

const translations: { [key: string]: { [key: string]: string } } = {
  en: {
    mining: 'Mining',
    cards: 'Princess Cards',
    wallet: 'Wallet',
    tasks: 'Tasks',
    referral: 'Referral',
    admin: 'Admin',
    mineNow: 'Mine Now',
    tapsRemaining: 'Taps Remaining',
    hourlyEarnings: 'Hourly Earnings',
    totalEarned: 'Total Earned',
    upgrade: 'Upgrade',
    buyCard: 'Buy Card',
    connectWallet: 'Connect Wallet',
    dailyLogin: 'Daily Login',
    shareApp: 'Share App',
    inviteFriends: 'Invite Friends',
    addCard: 'Add New Card',
    cardName: 'Card Name',
    hourlyYield: 'Hourly Yield',
    price: 'Price',
    currency: 'Currency',
    description: 'Description',
    save: 'Save',
    cancel: 'Cancel',
    level: 'Level',
    owned: 'Owned',
    princess: 'Princess',
    magical: 'Magical',
    fairy: 'Fairy',
    queen: 'Queen',
    empress: 'Empress',
    taskCenter: 'Tasks Center',
    dailyTasks: 'Daily Tasks',
    mainTasks: 'Main Tasks',
    partnerTasks: 'Partner Tasks',
    completed: 'Completed',
    claim: 'Claim',
    buyPrincessCard: 'Buy a Princess Card',
    completeAllTasks: 'Complete All Tasks',
    reachLevel10: 'Reach Level 10',
    invite5Friends: 'Invite 5 Friends',
    howToGetReferralLink: 'How to Get Referral Link',
    enterBot: 'Enter the Bot',
    writeCommand: 'Write Command',
    getReferralLink: 'Get Referral Link',
    openBot: 'Open Bot',
    airdropReward: 'Airdrop Reward',
    bonusReward: 'Bonus Reward',
    rarity: 'Rarity',
    addNewCard: 'Add New Card',
    manageCards: 'Manage Existing Cards',
    botWillSendLink: 'The bot will send you your referral link',
    youWillGet: 'You will get',
    atAirdropTime: 'at airdrop time!',
    moreInvitesMoreRewards: 'The more friends you invite, the more rewards you get',
    taskCompleted: 'Task Completed!',
    rewardReceived: 'Reward Received:',
    adminAccessGranted: 'Admin Access Granted!',
    welcomeToAdminPanel: 'Welcome to Admin Panel',
    adminPanel: 'Admin Panel',
    manageCardsAndSettings: 'Manage princess cards and app settings',
    missingInformation: 'Missing Information',
    fillAllFields: 'Please fill in all required fields.',
    princessCardAdded: 'Princess Card Added!',
    cardAddedToCollection: 'has been added to the collection.',
    common: 'Common',
    rare: 'Rare',
    epic: 'Epic',
    legendary: 'Legendary',
    linkCopied: 'Link Copied!',
    referralLinkCopied: 'Referral link copied to clipboard.',
    joinSHROUKMining: 'Join SHROUK Mining',
    mineCryptoWithCards: 'Mine crypto with beautiful princess cards!',
    connectTonWallet: 'Connect TON Wallet',
    connectToManage: 'Connect your wallet to manage your $SHROUK and $TON tokens',
    supportedWallets: 'Supported Wallets:',
    connectionError: 'Connection error occurred. Please try again.',
    walletAddress: 'Wallet Address',
    disconnect: 'Disconnect',
    copy: 'Copy',
    balanceUpdated: 'Balance Updated',
    tonBalance: 'TON Balance:',
    refreshBalance: 'Refresh Balance',
    sendRealTransaction: 'Send Real Transaction',
    sendTestTon: 'Send 0.01 TON (Test)',
    insufficientBalance: 'Insufficient TON balance for transaction',
    recentTransactions: 'Recent Transactions',
    send: 'Send',
    receive: 'Receive',
    pending: 'Pending',
    failed: 'Failed',
    to: 'To:',
    noTransactions: 'No transactions yet',
    walletConnectedSuccessfully: 'Wallet connected successfully! ✅',
    walletDisconnected: 'Disconnected! 🔌',
    tonWalletDisconnected: 'TON wallet disconnected.',
    addressCopied: 'Address copied! 📋',
    walletAddressCopied: 'Wallet address copied to clipboard.',
    transactionSent: 'Transaction sent! ✅',
    transactionSentSuccess: 'sent successfully',
    transactionFailed: 'Transaction failed',
    transactionFailedDescription: 'Failed to send transaction. Please try again.',
    errorFetchingBalance: 'Error fetching balance',
    couldNotFetchBalance: 'Could not fetch real TON balance',
    connectionErrorDescription: 'Error occurred during disconnection',
    noWalletConnected: 'No wallet connected',
    connectWalletFirst: 'Please connect wallet first',
    loading: 'Loading',
    noTasks: 'No tasks found',
    reward: 'Reward',
    clickToStartTask: 'Click to start the task',
    startTask: 'Start Task',
    comingSoon: 'Coming Soon',
    completeTasksAndEarnRewards: 'Complete tasks and earn rewards',
    noDailyTasks: 'No daily tasks available',
    noMainTasks: 'No main tasks available',
    noPartnerTasks: 'No partner tasks available'
  },
  ar: {
    mining: 'التعدين',
    cards: 'بطاقات الأميرات',
    wallet: 'المحفظة',
    tasks: 'المهام',
    referral: 'الإحالة',
    admin: 'الإدارة',
    mineNow: 'عدّن الآن',
    tapsRemaining: 'النقرات المتبقية',
    hourlyEarnings: 'الأرباح بالساعة',
    totalEarned: 'إجمالي المكسب',
    upgrade: 'ترقية',
    buyCard: 'شراء البطاقة',
    connectWallet: 'ربط المحفظة',
    dailyLogin: 'تسجيل دخول يومي',
    shareApp: 'مشاركة التطبيق',
    inviteFriends: 'دعوة الأصدقاء',
    addCard: 'إضافة بطاقة جديدة',
    cardName: 'اسم البطاقة',
    hourlyYield: 'العائد بالساعة',
    price: 'السعر',
    currency: 'العملة',
    description: 'الوصف',
    save: 'حفظ',
    cancel: 'إلغاء',
    level: 'المستوى',
    owned: 'مملوك',
    princess: 'أميرة',
    magical: 'سحرية',
    fairy: 'جنية',
    queen: 'ملكة',
    empress: 'إمبراطورة',
    taskCenter: 'مركز المهام',
    dailyTasks: 'المهام اليومية',
    mainTasks: 'المهام الرئيسية',
    partnerTasks: 'مهام الشراكة',
    completed: 'مكتملة',
    claim: 'استلام',
    buyPrincessCard: 'شراء بطاقة أميرة',
    completeAllTasks: 'إكمال جميع المهام',
    reachLevel10: 'الوصول للمستوى 10',
    invite5Friends: 'دعوة 5 أصدقاء',
    howToGetReferralLink: 'كيفية الحصول على رابط الإحالة',
    enterBot: 'ادخل إلى البوت',
    writeCommand: 'اكتب الأمر',
    getReferralLink: 'احصل على رابط الإحالة',
    openBot: 'فتح البوت',
    airdropReward: 'مكافأة الإيردروب',
    bonusReward: 'كافأة إضافية',
    rarity: 'الندرة',
    addNewCard: 'إضافة بطاقة جديدة',
    manageCards: 'إدارة البطاقات الموجودة',
    botWillSendLink: 'سيرسل لك البوت رابط الإحالة الخاص بك',
    youWillGet: 'ستحصل على',
    atAirdropTime: 'وقت الإيردروب!',
    moreInvitesMoreRewards: 'كلما دعوت أصدقاء أكثر، كلما زادت مكافآتك',
    taskCompleted: 'تم إكمال المهمة!',
    rewardReceived: 'تم استلام المكافأة:',
    adminAccessGranted: 'تم منح صلاحية الأدمن!',
    welcomeToAdminPanel: 'مرحباً بك في لوحة الأدمن',
    adminPanel: 'لوحة الأدمن',
    manageCardsAndSettings: 'إدارة بطاقات الأميرات وإعدادات التطبيق',
    missingInformation: 'معلومات مفقودة',
    fillAllFields: 'يرجى ملء جميع الحقول المطلوبة.',
    princessCardAdded: 'تم إضافة بطاقة الأميرة!',
    cardAddedToCollection: 'تم إضافتها إلى المجموعة.',
    common: 'عادية',
    rare: 'نادرة',
    epic: 'ملحمية',
    legendary: 'أسطورية',
    linkCopied: 'تم نسخ الرابط!',
    referralLinkCopied: 'تم نسخ رابط الإحالة إلى الحافظة.',
    joinSHROUKMining: 'انضم إلى تعدين شروق',
    mineCryptoWithCards: 'قم بتعدين العملات المشفرة ببطاقات الأميرات الجميلة!',
    connectTonWallet: 'اربط محفظة TON',
    connectToManage: 'اربط محفظتك لإدارة رموز $SHROUK و $TON الخاصة بك',
    supportedWallets: 'المحافظ المدعوم:',
    connectionError: 'حدث خطأ في الاتصال. يرجى المحاولة مرة أخرى.',
    walletAddress: 'عنوان المحفظة',
    disconnect: 'قطع الاتصال',
    copy: 'نسخ',
    balanceUpdated: 'تم تحديث الرصيد',
    tonBalance: 'رصيد TON:',
    refreshBalance: 'تحديث الرصيد',
    sendRealTransaction: 'إرسال معاملة حقيقية',
    sendTestTon: 'إرسال 0.01 TON (اختبار)',
    insufficientBalance: 'رصيد TON غير كافي للمعاملة',
    recentTransactions: 'المعاملات الأخيرة',
    send: 'إرسال',
    receive: 'استقبال',
    pending: 'معلقة',
    failed: 'فاشلة',
    to: 'إلى:',
    noTransactions: 'لا توجد معاملات بعد',
    walletConnectedSuccessfully: 'تم ربط المحفظة بنجاح! ✅',
    walletDisconnected: 'تم قطع الاتصال! 🔌',
    tonWalletDisconnected: 'تم قطع الاتصال بمحفظة TON.',
    addressCopied: 'تم نسخ العنوان! 📋',
    walletAddressCopied: 'تم نسخ عنوان المحفظة إلى الحافظة.',
    transactionSent: 'تم إرسال المعاملة! ✅',
    transactionSentSuccess: 'تم إرسال',
    transactionFailedDescription: 'فشل في إرسال المعاملة. يرجى المحاولة مرة أخرى.',
    transactionFailed: 'فشل في المعاملة',
    errorFetchingBalance: 'خطأ في جلب الرصيد',
    couldNotFetchBalance: 'لم نتمكن من جلب رصيد TON الحقيقي',
    connectionErrorDescription: 'حدث خطأ أثناء قطع الاتصال',
    noWalletConnected: 'لا توجد محفظة متصلة',
    connectWalletFirst: 'يرجى ربط المحفظة أولاً',
    loading: 'جاري التحميل',
    noTasks: 'لا توجد مهام',
    reward: 'المكافأة',
    clickToStartTask: 'انقر لبدء المهمة',
    startTask: 'ابدأ المهمة',
    comingSoon: 'قريباً',
    completeTasksAndEarnRewards: 'أكمل المهام واحصل على المكافآت',
    noDailyTasks: 'لا توجد مهام يومية متاحة',
    noMainTasks: 'لا توجد مهام رئيسية متاحة',
    noPartnerTasks: 'لا توجد مهام شراكة متاحة'
  },
  ru: {
    mining: 'Майнинг',
    cards: 'Карты Принцесс',
    wallet: 'Кошелек',
    tasks: 'Задания',
    referral: 'Рефералы',
    admin: 'Админ',
    mineNow: 'Майнить',
    tapsRemaining: 'Тапов осталось',
    hourlyEarnings: 'Доход в час',
    totalEarned: 'Всего заработано',
    upgrade: 'Улучшить',
    buyCard: 'Купить карту',
    connectWallet: 'Подключить кошелек',
    dailyLogin: 'Ежедневный вход',
    shareApp: 'Поделиться',
    inviteFriends: 'Пригласить друзей',
    addCard: 'Добавить карту',
    cardName: 'Название карты',
    hourlyYield: 'Доход в час',
    price: 'Цена',
    currency: 'Валюта',
    description: 'Описание',
    save: 'Сохранить',
    cancel: 'Отмена',
    level: 'Уровень',
    owned: 'Принадлежит',
    princess: 'Принцесса',
    magical: 'Магическая',
    fairy: 'Фея',
    queen: 'Королева',
    empress: 'Императрица',
    taskCenter: 'Центр заданий',
    dailyTasks: 'Ежедневные задания',
    mainTasks: 'Основные задания',
    partnerTasks: 'Партнерские задания',
    completed: 'Завершено',
    claim: 'Получить',
    buyPrincessCard: 'Купить карту принцессы',
    completeAllTasks: 'Выполнить все задания',
    reachLevel10: 'Достичь 10 уровня',
    invite5Friends: 'Пригласить 5 друзей',
    howToGetReferralLink: 'Как получить реферальную ссылку',
    enterBot: 'Войти в бота',
    writeCommand: 'Написать команду',
    getReferralLink: 'Получить реферальную ссылку',
    openBot: 'Открыть бота',
    airdropReward: 'Награда за аирдроп',
    bonusReward: 'Бонусная награда',
    rarity: 'Редкость',
    addNewCard: 'Добавить новую карту',
    manageCards: 'Управление существующими картами',
    botWillSendLink: 'Бот отправит вам вашу реферальную ссылку',
    youWillGet: 'Вы получите',
    atAirdropTime: 'во время аирдропа!',
    moreInvitesMoreRewards: 'Чем больше друзей пригласите, тем больше наград получите',
    taskCompleted: 'Задание выполнено!',
    rewardReceived: 'Получена награда:',
    adminAccessGranted: 'Доступ администратора предоставлен!',
    welcomeToAdminPanel: 'Добро пожаловать в панель администратора',
    adminPanel: 'Панель администратора',
    manageCardsAndSettings: 'Управление картами принцесс и настройками приложения',
    missingInformation: 'Недостающая информация',
    fillAllFields: 'Пожалуйста, заполните все обязательные поля.',
    princessCardAdded: 'Карта принцессы добавлена!',
    cardAddedToCollection: 'была добавлена в коллекцию.',
    common: 'Обычная',
    rare: 'Редкая',
    epic: 'Эпическая',
    legendary: 'Легендарная',
    linkCopied: 'Ссылка скопирована!',
    referralLinkCopied: 'Реферальная ссылка скопирована в буфер обмена.',
    joinSHROUKMining: 'Присоединяйтесь к SHROUK Mining',
    mineCryptoWithCards: 'Майните криптовалюту с красивыми картами принцесс!',
    connectTonWallet: 'Подключить TON кошелек',
    connectToManage: 'Подключите кошелек для управления токенами $SHROUK и $TON',
    supportedWallets: 'Поддерживаемые кошельки:',
    connectionError: 'Произошла ошибка подключения. Попробуйте еще раз.',
    walletAddress: 'Адрес кошелька',
    disconnect: 'Отключить',
    copy: 'Копировать',
    balanceUpdated: 'Баланс обновлен',
    tonBalance: 'Баланс TON:',
    refreshBalance: 'Обновить баланс',
    sendRealTransaction: 'Отправить реальную транзакцию',
    sendTestTon: 'Отправить 0.01 TON (тест)',
    insufficientBalance: 'Недостаточно TON для транзакции',
    recentTransactions: 'Последние транзакции',
    send: 'Отправить',
    receive: 'Получить',
    pending: 'Ожидание',
    failed: 'Неудачно',
    to: 'К:',
    noTransactions: 'Транзакций пока нет',
    walletConnectedSuccessfully: 'Кошелек успешно подключен! ✅',
    walletDisconnected: 'Отключен! 🔌',
    tonWalletDisconnected: 'TON кошелек отключен.',
    addressCopied: 'Адрес скопирован! 📋',
    walletAddressCopied: 'Адрес кошелька скопирован в буфер обмена.',
    transactionSent: 'Транзакция отправлена! ✅',
    transactionSentSuccess: 'отправлено успешно',
    transactionFailed: 'Транзакция не удалась',
    transactionFailedDescription: 'Не удалось отправить транзакцию. Попробуйте еще раз.',
    errorFetchingBalance: 'Ошибка получения баланса',
    couldNotFetchBalance: 'Не удалось получить реальный баланс TON',
    connectionErrorDescription: 'Произошла ошибка при отключении',
    noWalletConnected: 'Кошелек не подключен',
    connectWalletFirst: 'Сначала подключите кошелек',
    loading: 'Загрузка',
    noTasks: 'Заданий нет',
    reward: 'Награда',
    clickToStartTask: 'Нажмите, чтобы начать задание',
    startTask: 'Начать задание',
    comingSoon: 'Скоро',
    completeTasksAndEarnRewards: 'Выполняйте задания и зарабатывайте награды',
    noDailyTasks: 'Нет ежедневных заданий',
    noMainTasks: 'Нет основных заданий',
    noPartnerTasks: 'Нет партнерских заданий'
  }
};

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState('ar');

  useEffect(() => {
    const savedLang = localStorage.getItem('language');
    if (savedLang && ['ar', 'en', 'ru'].includes(savedLang)) {
      setLanguage(savedLang);
    } else {
      const browserLang = navigator.language.split('-')[0];
      if (['ar', 'en', 'ru'].includes(browserLang)) {
        setLanguage(browserLang);
      } else {
        setLanguage('ar');
      }
    }
  }, []);

  const handleSetLanguage = (lang: string) => {
    if (['ar', 'en', 'ru'].includes(lang)) {
      setLanguage(lang);
      localStorage.setItem('language', lang);
    }
  };

  const t = (key: string): string => {
    return translations[language]?.[key] || translations.ar[key] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage: handleSetLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
